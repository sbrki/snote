package server

import (
	"crypto/sha256"
	"net/http"
	"time"

	"github.com/labstack/echo"
	"github.com/sbrki/snote/internal/storage"
)

func (s *Server) noteGetHandler(c echo.Context) error {
	id := c.Param("note_id")
	var note *storage.Note
	if id == "ls" {
		note = new(storage.Note)
		note.GenerateLs(s.storage)
	} else {
		storedNote, err := s.storage.LoadNote(id)
		if err != nil {
			return echo.NewHTTPError(http.StatusNotFound, "404 Not found")
		}
		note = storedNote
	}
	return c.JSON(http.StatusOK, note)
}

func (s *Server) notePutHandler(c echo.Context) error {
	id := c.Param("note_id")

	// ignore put requests to system autogenerated notes
	if id == "ls" {
		return c.NoContent(http.StatusOK)
	}

	// delete rendered HTML from cache.
	// without deleting the cache on PUT requests the cache
	// get stale.
	s.renderCache.Delete(id)

	_, exists := s.storage.LoadNote(id)

	updatedNote := new(storage.Note)
	if err := c.Bind(updatedNote); err != nil {
		c.Logger().Error(err)
		return echo.NewHTTPError(http.StatusInternalServerError, "error bining request body json to storage.Note struct (check logs for more info)")
	}
	updatedNote.LastEdit = time.Now()
	err := s.storage.SaveNote(updatedNote)
	if err != nil {
		c.Logger().Error(err)
		return echo.NewHTTPError(http.StatusInternalServerError, "error saving note (check logs for more info)")
	}

	// return 200 if note was updated
	if exists == nil {
		return c.NoContent(http.StatusOK)
	}
	// return 201 if new note was created
	return c.NoContent(http.StatusCreated)
}

func (s *Server) noteDeleteHandler(c echo.Context) error {
	id := c.Param("note_id")
	// ignore system autogenerated notes
	if id == "ls" {
		return c.NoContent(http.StatusOK)
	}

	_, err := s.storage.LoadNote(id)
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	err = s.storage.DeleteNote(id)
	if err != nil {
		c.Logger().Error(err)
		return echo.NewHTTPError(http.StatusInternalServerError)
	}

	return c.NoContent(http.StatusOK)
}

// used by the client to create a new note.
// returns HTTP 409 (Conflict) if a note with the same id already exists.
// returns HTTP 201 (Created)  on a successful creation.
func (s *Server) noteCollectionPostHandler(c echo.Context) error {
	// read the id of the new note that the client suggested
	id := c.FormValue("suggested_id")
	// ignore system autogenerated notes
	if id == "ls" {
		return c.NoContent(http.StatusConflict)
	}

	// check if a note with the provided id exists
	_, err := s.storage.LoadNote(id)
	if err == nil {
		return c.NoContent(http.StatusConflict)
	}

	// create new note
	newNote := new(storage.Note)
	newNote.ID = id
	newNote.Contents = "# " + id
	newNote.LastEdit = time.Now()
	newNote.Tags = make([]string, 0)

	err = s.storage.SaveNote(newNote)
	if err != nil {
		c.Logger().Error(err)
		return c.NoContent(http.StatusInternalServerError)
	}

	return c.NoContent(http.StatusCreated)
}

func (s *Server) blobCollectionPostHandler(c echo.Context) error {
	file, err := c.FormFile("file")
	if err != nil {
		c.Logger().Error(err)
		return c.NoContent(http.StatusInternalServerError)
	}

	src, err := file.Open()
	defer src.Close()
	if err != nil {
		c.Logger().Error(err)
		return c.NoContent(http.StatusInternalServerError)
	}

	id, err := s.storage.CreateBlob(src, sha256.New())
	if err != nil {
		c.Logger().Error(err)
		return c.NoContent(http.StatusInternalServerError)
	}

	// set the location header
	c.Response().Header().Set(echo.HeaderLocation, "/api/blob/"+id)
	return c.NoContent(http.StatusCreated)
}

func (s *Server) blobGetHandler(c echo.Context) error {
	id := c.Param("blob_id")
	path, err := s.storage.GetBlobPath(id)
	if err != nil {
		return c.NoContent(http.StatusNotFound)
	}
	return c.File(path)
}

package server

import (
	"net/http"
	"time"

	"github.com/labstack/echo"
	"github.com/sbrki/snote/internal/storage"
)

func (s *Server) noteGetHandler(c echo.Context) error {
	id := c.Param("note_id")
	var note *storage.Note
	if id == "ls" {
		note = new(storage.Note)
		note.GenerateLs(s.storage)
	} else {
		storedNote, err := s.storage.LoadNote(id)
		if err != nil {
			return echo.NewHTTPError(http.StatusNotFound, "404 Not found")
		}
		note = storedNote
	}
	return c.JSON(http.StatusOK, note)
}

func (s *Server) notePutHandler(c echo.Context) error {
	id := c.Param("note_id")

	// ignore put requests to system autogenerated notes
	if id == "ls" {
		return c.NoContent(http.StatusOK)
	}

	// delete rendered HTML from cache.
	// without deleting the cache on PUT requests the cache
	// get stale.
	s.renderCache.Delete(id)

	_, exists := s.storage.LoadNote(id)

	updatedNote := new(storage.Note)
	if err := c.Bind(updatedNote); err != nil {
		c.Logger().Error(err)
		return echo.NewHTTPError(http.StatusInternalServerError, "error bining request body json to storage.Note struct (check logs for more info)")
	}
	updatedNote.LastEdit = time.Now()
	err := s.storage.SaveNote(updatedNote)
	if err != nil {
		c.Logger().Error(err)
		return echo.NewHTTPError(http.StatusInternalServerError, "error saving note (check logs for more info)")
	}

	// return 200 if note was updated
	if exists == nil {
		return c.NoContent(http.StatusOK)
	}
	// return 201 if new note was created
	return c.NoContent(http.StatusCreated)
}

func (s *Server) noteDeleteHandler(c echo.Context) error {
	id := c.Param("note_id")
	// ignore system autogenerated notes
	if id == "ls" {
		return c.NoContent(http.StatusOK)
	}

	_, err := s.storage.LoadNote(id)
	if err != nil {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	err = s.storage.DeleteNote(id)
	if err != nil {
		c.Logger().Error(err)
		return echo.NewHTTPError(http.StatusInternalServerError)
	}

	return c.NoContent(http.StatusOK)
}

// returns a json representation of a note object with all fields properly initialised.
// used on the client as a blueprint for creating new notes with a PUT request to /:note_id endpoint.
// TODO(sbrki): maybe rework the note creation to use POST request with new note id as body param.
// That way the client does not need to check if the note with the user provided ID already exists,
// nor does it need to fetch the prototype. Both of these should be handled by the backend.
func (s *Server) notePrototypeHandler(c echo.Context) error {
	note := new(storage.Note)
	note.LastEdit = time.Now()
	note.Tags = make([]string, 0)
	return c.JSON(http.StatusOK, note)
}
